/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateNewasdfghjklArgs } from "./CreateNewasdfghjklArgs";
import { UpdateNewasdfghjklArgs } from "./UpdateNewasdfghjklArgs";
import { DeleteNewasdfghjklArgs } from "./DeleteNewasdfghjklArgs";
import { NewasdfghjklFindManyArgs } from "./NewasdfghjklFindManyArgs";
import { NewasdfghjklFindUniqueArgs } from "./NewasdfghjklFindUniqueArgs";
import { Newasdfghjkl } from "./Newasdfghjkl";
import { NewasdfghjklService } from "../newasdfghjkl.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Newasdfghjkl)
export class NewasdfghjklResolverBase {
  constructor(
    protected readonly service: NewasdfghjklService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "read",
    possession: "any",
  })
  async _newasdfghjklsMeta(
    @graphql.Args() args: NewasdfghjklFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Newasdfghjkl])
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "read",
    possession: "any",
  })
  async newasdfghjkls(
    @graphql.Args() args: NewasdfghjklFindManyArgs
  ): Promise<Newasdfghjkl[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Newasdfghjkl, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "read",
    possession: "own",
  })
  async newasdfghjkl(
    @graphql.Args() args: NewasdfghjklFindUniqueArgs
  ): Promise<Newasdfghjkl | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Newasdfghjkl)
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "create",
    possession: "any",
  })
  async createNewasdfghjkl(
    @graphql.Args() args: CreateNewasdfghjklArgs
  ): Promise<Newasdfghjkl> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Newasdfghjkl)
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "update",
    possession: "any",
  })
  async updateNewasdfghjkl(
    @graphql.Args() args: UpdateNewasdfghjklArgs
  ): Promise<Newasdfghjkl | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Newasdfghjkl)
  @nestAccessControl.UseRoles({
    resource: "Newasdfghjkl",
    action: "delete",
    possession: "any",
  })
  async deleteNewasdfghjkl(
    @graphql.Args() args: DeleteNewasdfghjklArgs
  ): Promise<Newasdfghjkl | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
